
@page "/profileinformation"
@using EduTrack.Shared.Modules
@using EduTrack.Shared.Services
@inject IEduTrackService EduTrackService
@inject NavigationManager NavigationManager
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

<h3 class="text-2xl font-bold mb-4">Profile Information</h3>

@if (errorMessage != null)
{
    <p class="text-red-500">@errorMessage</p>
}
else if (user == null)
{
    <p>Loading...</p>
}
else
{
    <div class="bg-white p-4 rounded-lg shadow mb-4">
        <h4 class="text-lg font-semibold mb-2">Edit Profile</h4>
        <div class="space-y-4">
            <div>
                <label class="block text-sm font-medium text-gray-700">Username</label>
                <input type="text" @bind="user.Username" class="mt-1 block w-full border border-gray-300 rounded-md p-2" required />
                @if (string.IsNullOrEmpty(user.Username))
                {
                    <p class="text-red-500 text-sm">Username is required.</p>
                }
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700">Email</label>
                <input type="email" @bind="user.Email" class="mt-1 block w-full border border-gray-300 rounded-md p-2" required />
                @if (string.IsNullOrEmpty(user.Email) || !IsValidEmail(user.Email))
                {
                    <p class="text-red-500 text-sm">Valid email is required.</p>
                }
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700">First Name</label>
                <input type="text" @bind="user.FirstName" class="mt-1 block w-full border border-gray-300 rounded-md p-2" required />
                @if (string.IsNullOrEmpty(user.FirstName))
                {
                    <p class="text-red-500 text-sm">First Name is required.</p>
                }
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700">Last Name</label>
                <input type="text" @bind="user.LastName" class="mt-1 block w-full border border-gray-300 rounded-md p-2" required />
                @if (string.IsNullOrEmpty(user.LastName))
                {
                    <p class="text-red-500 text-sm">Last Name is required.</p>
                }
            </div>
            <div class="flex space-x-2">
                <button class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600" @onclick="UpdateProfile">Update Profile</button>
                <button class="bg-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-400" @onclick="CancelEdit">Cancel</button>
            </div>
        </div>
    </div>
}

@code {
    private User? user;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var users = await EduTrackService.GetUsersAsync();
            user = users.FirstOrDefault(u => u.Id == 1); // Assume UserId = 1 for student1
            if (user == null)
            {
                errorMessage = "User not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading profile: {ex.Message}";
        }
    }

    private async Task UpdateProfile()
    {
        if (user == null || string.IsNullOrEmpty(user.Username) || string.IsNullOrEmpty(user.Email) ||
            !IsValidEmail(user.Email) || string.IsNullOrEmpty(user.FirstName) || string.IsNullOrEmpty(user.LastName))
        {
            errorMessage = "Please fill in all required fields with valid data.";
            return;
        }

        try
        {
            await EduTrackService.UpdateUserAsync(user);
            errorMessage = "Profile updated successfully.";
            NavigationManager.NavigateTo("/profileinformation", true);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating profile: {ex.Message}";
        }
    }

    private void CancelEdit()
    {
        NavigationManager.NavigateTo("/profileinformation", true);
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }
}
